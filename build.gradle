plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'java'
    id "com.github.node-gradle.node" version "2.2.1"
    id "org.jooq.jooq-codegen-gradle" version "3.19.13"
}

apply from: 'project-properties.gradle'
apply from: 'jooq.gradle'
apply from: 'ui.gradle'
apply from: "$scriptsUrl/jacoco.gradle"

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    mavenCentral { url "https://repo1.maven.org/maven2" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version') : 'com.epam.reportportal:commons-bom:5.13.0')
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:a98c172'
        implementation 'com.github.reportportal:plugin-api:1c2f758'
        annotationProcessor 'com.github.reportportal:plugin-api:1c2f758'
    }
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'
    implementation 'io.gsonfire:gson-fire:1.8.0'
    implementation 'org.threeten:threetenbp:1.3.5'

    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    implementation group: 'org.glassfish', name: 'javax.el', version: '3.0.0'
    implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    implementation group: 'org.jooq', name: 'jooq', version: '3.14.4'
    implementation 'org.postgresql:postgresql:42.7.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.9'

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

artifacts {
    archives shadowJar
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.azure.AzurePlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.compileClasspath]
    zip64 true
    dependencies {
        include(dependency('com.squareup.okhttp:.*:.*'))
        include(dependency('io.gsonfire:gson-fire:.*'))
        include(dependency('org.threeten:threetenbp:.*'))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build
build.dependsOn jacocoTestReport
