/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model.workitem;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

/**
 * Defines a classification node for work item tracking.
 */
@Schema(description = "Defines a classification node for work item tracking.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T21:33:08.123Z")
public class WorkItemClassificationNode extends WorkItemTrackingResource {
  @SerializedName("attributes")
  private Map<String, Object> attributes = null;

  @SerializedName("children")
  private List<WorkItemClassificationNode> children = null;

  @SerializedName("hasChildren")
  private Boolean hasChildren = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("identifier")
  private UUID identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("structureType")
  private String structureType = null;

  public WorkItemClassificationNode attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public WorkItemClassificationNode putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String, Object>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Dictionary that has node attributes like start/finish date for iteration nodes.
   * @return attributes
  **/
  @Schema(description = "Dictionary that has node attributes like start/finish date for iteration nodes.")
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public WorkItemClassificationNode children(List<WorkItemClassificationNode> children) {
    this.children = children;
    return this;
  }

  public WorkItemClassificationNode addChildrenItem(WorkItemClassificationNode childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<WorkItemClassificationNode>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * List of child nodes fetched.
   * @return children
  **/
  @Schema(description = "List of child nodes fetched.")
  public List<WorkItemClassificationNode> getChildren() {
    return children;
  }

  public void setChildren(List<WorkItemClassificationNode> children) {
    this.children = children;
  }

  public WorkItemClassificationNode hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

   /**
   * Flag that indicates if the classification node has any child nodes.
   * @return hasChildren
  **/
  @Schema(description = "Flag that indicates if the classification node has any child nodes.")
  public Boolean isHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }

  public WorkItemClassificationNode id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Integer ID of the classification node.
   * @return id
  **/
  @Schema(description = "Integer ID of the classification node.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public WorkItemClassificationNode identifier(UUID identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * GUID ID of the classification node.
   * @return identifier
  **/
  @Schema(description = "GUID ID of the classification node.")
  public UUID getIdentifier() {
    return identifier;
  }

  public void setIdentifier(UUID identifier) {
    this.identifier = identifier;
  }

  public WorkItemClassificationNode name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the classification node.
   * @return name
  **/
  @Schema(description = "Name of the classification node.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkItemClassificationNode path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path of the classification node.
   * @return path
  **/
  @Schema(description = "Path of the classification node.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public WorkItemClassificationNode structureType(String structureType) {
    this.structureType = structureType;
    return this;
  }

   /**
   * Node structure type.
   * @return structureType
  **/
  @Schema(description = "Node structure type.")
  public String getStructureType() {
    return structureType;
  }

  public void setStructureType(String structureType) {
    this.structureType = structureType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemClassificationNode workItemClassificationNode = (WorkItemClassificationNode) o;
    return Objects.equals(this.attributes, workItemClassificationNode.attributes) &&
        Objects.equals(this.children, workItemClassificationNode.children) &&
        Objects.equals(this.hasChildren, workItemClassificationNode.hasChildren) &&
        Objects.equals(this.id, workItemClassificationNode.id) &&
        Objects.equals(this.identifier, workItemClassificationNode.identifier) &&
        Objects.equals(this.name, workItemClassificationNode.name) &&
        Objects.equals(this.path, workItemClassificationNode.path) &&
        Objects.equals(this.structureType, workItemClassificationNode.structureType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, children, hasChildren, id, identifier, name, path, structureType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemClassificationNode {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    structureType: ").append(toIndentedString(structureType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
