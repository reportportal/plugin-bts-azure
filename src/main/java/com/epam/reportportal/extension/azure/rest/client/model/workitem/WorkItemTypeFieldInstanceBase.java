/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model.workitem;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Base field instance for workItemType fields.
 */
@Schema(description = "Base field instance for workItemType fields.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T21:33:08.123Z")
public class WorkItemTypeFieldInstanceBase extends WorkItemFieldReference {
  @SerializedName("alwaysRequired")
  private Boolean alwaysRequired = null;

  @SerializedName("dependentFields")
  private List<WorkItemFieldReference> dependentFields = null;

  @SerializedName("helpText")
  private String helpText = null;

  public WorkItemTypeFieldInstanceBase alwaysRequired(Boolean alwaysRequired) {
    this.alwaysRequired = alwaysRequired;
    return this;
  }

  /**
   * Indicates whether field value is always required.
   *
   * @return alwaysRequired
   **/
  @Schema(description = "Indicates whether field value is always required.")
  public Boolean isAlwaysRequired() {
    return alwaysRequired;
  }

  public void setAlwaysRequired(Boolean alwaysRequired) {
    this.alwaysRequired = alwaysRequired;
  }

  public WorkItemTypeFieldInstanceBase dependentFields(
      List<WorkItemFieldReference> dependentFields) {
    this.dependentFields = dependentFields;
    return this;
  }

  public WorkItemTypeFieldInstanceBase addDependentFieldsItem(
      WorkItemFieldReference dependentFieldsItem) {
    if (this.dependentFields == null) {
      this.dependentFields = new ArrayList<WorkItemFieldReference>();
    }
    this.dependentFields.add(dependentFieldsItem);
    return this;
  }

  /**
   * The list of dependent fields.
   *
   * @return dependentFields
   **/
  @Schema(description = "The list of dependent fields.")
  public List<WorkItemFieldReference> getDependentFields() {
    return dependentFields;
  }

  public void setDependentFields(List<WorkItemFieldReference> dependentFields) {
    this.dependentFields = dependentFields;
  }

  public WorkItemTypeFieldInstanceBase helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

  /**
   * Gets the help text for the field.
   *
   * @return helpText
   **/
  @Schema(description = "Gets the help text for the field.")
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemTypeFieldInstanceBase workItemTypeFieldInstanceBase = (WorkItemTypeFieldInstanceBase) o;
    return Objects.equals(this.alwaysRequired, workItemTypeFieldInstanceBase.alwaysRequired)
        && Objects.equals(this.dependentFields, workItemTypeFieldInstanceBase.dependentFields)
        && Objects.equals(this.helpText, workItemTypeFieldInstanceBase.helpText) && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysRequired, dependentFields, helpText, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemTypeFieldInstanceBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    alwaysRequired: ").append(toIndentedString(alwaysRequired)).append("\n");
    sb.append("    dependentFields: ").append(toIndentedString(dependentFields)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
