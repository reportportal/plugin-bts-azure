/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model.workitem;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/**
 * The JSON model for a JSON Patch operation
 */
@ApiModel(description = "The JSON model for a JSON Patch operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T21:33:08.123Z")
public class JsonPatchOperation {
  @SerializedName("from")
  private String from = null;

  @SerializedName("op")
  private Object op = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("value")
  private Object value = null;

  public JsonPatchOperation() {
  }

  public JsonPatchOperation(String from, Object op, String path, Object value) {
    this.from = from;
    this.op = op;
    this.path = path;
    this.value = value;
  }

  public JsonPatchOperation from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The path to copy from for the Move/Copy operation.
   * @return from
  **/
  @ApiModelProperty(value = "The path to copy from for the Move/Copy operation.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public JsonPatchOperation op(Object op) {
    this.op = op;
    return this;
  }

   /**
   * The patch operation
   * @return op
  **/
  @ApiModelProperty(value = "The patch operation")
  public Object getOp() {
    return op;
  }

  public void setOp(Object op) {
    this.op = op;
  }

  public JsonPatchOperation path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The \&quot;-\&quot; character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
   * @return path
  **/
  @ApiModelProperty(value = "The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The \"-\" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public JsonPatchOperation value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * The value for the operation. This is either a primitive or a JToken.
   * @return value
  **/
  @ApiModelProperty(value = "The value for the operation. This is either a primitive or a JToken.")
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonPatchOperation jsonPatchOperation = (JsonPatchOperation) o;
    return Objects.equals(this.from, jsonPatchOperation.from) &&
        Objects.equals(this.op, jsonPatchOperation.op) &&
        Objects.equals(this.path, jsonPatchOperation.path) &&
        Objects.equals(this.value, jsonPatchOperation.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, op, path, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonPatchOperation {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
