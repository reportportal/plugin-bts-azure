/*
 * Core
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.
 */
@Schema(description = "An Identity descriptor is a wrapper for the identity type (Windows SID, Passport) along with a unique identifier such as the SID or PUID.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-22T22:33:25.592Z")
public class IdentityDescriptor {
  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("identityType")
  private String identityType = null;

  public IdentityDescriptor identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The unique identifier for this identity, not exceeding 256 chars, which will be persisted.
   * @return identifier
  **/
  @Schema(description = "The unique identifier for this identity, not exceeding 256 chars, which will be persisted.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public IdentityDescriptor identityType(String identityType) {
    this.identityType = identityType;
    return this;
  }

   /**
   * Type of descriptor (for example, Windows, Passport, etc.).
   * @return identityType
  **/
  @Schema(description = "Type of descriptor (for example, Windows, Passport, etc.).")
  public String getIdentityType() {
    return identityType;
  }

  public void setIdentityType(String identityType) {
    this.identityType = identityType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityDescriptor identityDescriptor = (IdentityDescriptor) o;
    return Objects.equals(this.identifier, identityDescriptor.identifier) &&
        Objects.equals(this.identityType, identityDescriptor.identityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, identityType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityDescriptor {\n");
    
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    identityType: ").append(toIndentedString(identityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
