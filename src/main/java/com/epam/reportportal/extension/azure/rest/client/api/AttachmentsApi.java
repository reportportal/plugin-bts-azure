/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.api;

import com.epam.reportportal.extension.azure.rest.client.ApiCallback;
import com.epam.reportportal.extension.azure.rest.client.ApiClient;
import com.epam.reportportal.extension.azure.rest.client.ApiException;
import com.epam.reportportal.extension.azure.rest.client.ApiResponse;
import com.epam.reportportal.extension.azure.rest.client.Configuration;
import com.epam.reportportal.extension.azure.rest.client.Pair;
import com.epam.reportportal.extension.azure.rest.client.ProgressRequestBody;
import com.epam.reportportal.extension.azure.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.epam.reportportal.extension.azure.rest.client.model.AttachmentReference;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentsApi {
    private ApiClient apiClient;

    public AttachmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for attachmentsCreate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName The name of the file (optional)
     * @param uploadType Attachment upload type: Simple or Chunked (optional)
     * @param areaPath Target project Area Path (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call attachmentsCreateCall(String organization, byte[] body, String project, String apiVersion, String fileName, String uploadType, String areaPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/attachments"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));
        }
        if (uploadType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("uploadType", uploadType));
        }
        if (areaPath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("areaPath", areaPath));
        }
        if (apiVersion != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "accessToken" }; //"oauth2",
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call attachmentsCreateValidateBeforeCall(String organization, byte[] body, String project, String apiVersion, String fileName, String uploadType, String areaPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling attachmentsCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling attachmentsCreate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling attachmentsCreate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachmentsCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = attachmentsCreateCall(organization, body, project, apiVersion, fileName, uploadType, areaPath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Uploads an attachment.  On accounts with higher attachment upload limits (&gt;130MB), you will need to use chunked upload. To upload an attachment in multiple chunks, you first need to [**Start a Chunked Upload**](#start_a_chunked_upload) and then follow the example from the **Upload Chunk** section.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName The name of the file (optional)
     * @param uploadType Attachment upload type: Simple or Chunked (optional)
     * @param areaPath Target project Area Path (optional)
     * @return AttachmentReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentReference attachmentsCreate(String organization, byte[] body, String project, String apiVersion, String fileName, String uploadType, String areaPath) throws ApiException {
        ApiResponse<AttachmentReference> resp = attachmentsCreateWithHttpInfo(organization, body, project, apiVersion, fileName, uploadType, areaPath);
        return resp.getData();
    }

    /**
     * 
     * Uploads an attachment.  On accounts with higher attachment upload limits (&gt;130MB), you will need to use chunked upload. To upload an attachment in multiple chunks, you first need to [**Start a Chunked Upload**](#start_a_chunked_upload) and then follow the example from the **Upload Chunk** section.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName The name of the file (optional)
     * @param uploadType Attachment upload type: Simple or Chunked (optional)
     * @param areaPath Target project Area Path (optional)
     * @return ApiResponse&lt;AttachmentReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentReference> attachmentsCreateWithHttpInfo(String organization, byte[] body, String project, String apiVersion, String fileName, String uploadType, String areaPath) throws ApiException {
        com.squareup.okhttp.Call call = attachmentsCreateValidateBeforeCall(organization, body, project, apiVersion, fileName, uploadType, areaPath, null, null);
        Type localVarReturnType = new TypeToken<AttachmentReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Uploads an attachment.  On accounts with higher attachment upload limits (&gt;130MB), you will need to use chunked upload. To upload an attachment in multiple chunks, you first need to [**Start a Chunked Upload**](#start_a_chunked_upload) and then follow the example from the **Upload Chunk** section.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName The name of the file (optional)
     * @param uploadType Attachment upload type: Simple or Chunked (optional)
     * @param areaPath Target project Area Path (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call attachmentsCreateAsync(String organization, byte[] body, String project, String apiVersion, String fileName, String uploadType, String areaPath, final ApiCallback<AttachmentReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = attachmentsCreateValidateBeforeCall(organization, body, project, apiVersion, fileName, uploadType, areaPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for attachmentsGet
     * @param organization The name of the Azure DevOps organization. (required)
     * @param id Attachment ID (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName Name of the file (optional)
     * @param download If set to &lt;c&gt;true&lt;/c&gt; always download attachment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call attachmentsGetCall(String organization, UUID id, String project, String apiVersion, String fileName, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/attachments/{id}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));
        }
        if (download != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("download", download));
        }
        if (apiVersion != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/zip"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call attachmentsGetValidateBeforeCall(String organization, UUID id, String project, String apiVersion, String fileName, Boolean download, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling attachmentsGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attachmentsGet(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling attachmentsGet(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachmentsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = attachmentsGetCall(organization, id, project, apiVersion, fileName, download, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Downloads an attachment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param id Attachment ID (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName Name of the file (optional)
     * @param download If set to &lt;c&gt;true&lt;/c&gt; always download attachment (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String attachmentsGet(String organization, UUID id, String project, String apiVersion, String fileName, Boolean download) throws ApiException {
        ApiResponse<String> resp = attachmentsGetWithHttpInfo(organization, id, project, apiVersion, fileName, download);
        return resp.getData();
    }

    /**
     * 
     * Downloads an attachment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param id Attachment ID (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName Name of the file (optional)
     * @param download If set to &lt;c&gt;true&lt;/c&gt; always download attachment (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> attachmentsGetWithHttpInfo(String organization, UUID id, String project, String apiVersion, String fileName, Boolean download) throws ApiException {
        com.squareup.okhttp.Call call = attachmentsGetValidateBeforeCall(organization, id, project, apiVersion, fileName, download, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Downloads an attachment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param id Attachment ID (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName Name of the file (optional)
     * @param download If set to &lt;c&gt;true&lt;/c&gt; always download attachment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call attachmentsGetAsync(String organization, UUID id, String project, String apiVersion, String fileName, Boolean download, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = attachmentsGetValidateBeforeCall(organization, id, project, apiVersion, fileName, download, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for attachmentsUploadChunk
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param id The id of the attachment (required)
     * @param contentRangeHeader starting and ending byte positions for chunked file upload, format is \&quot;Content-Range\&quot;: \&quot;bytes 0-10000/50000\&quot; (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call attachmentsUploadChunkCall(String organization, String body, UUID id, String contentRangeHeader, String project, String apiVersion, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/attachments/{id}"
            .replaceAll("\\{" + "organization" + "\\}", apiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));
        }
        if (apiVersion != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentRangeHeader != null) {
            localVarHeaderParams.put("contentRangeHeader", apiClient.parameterToString(contentRangeHeader));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call attachmentsUploadChunkValidateBeforeCall(String organization, String body, UUID id, String contentRangeHeader, String project, String apiVersion, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling attachmentsUploadChunk(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling attachmentsUploadChunk(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attachmentsUploadChunk(Async)");
        }
        
        // verify the required parameter 'contentRangeHeader' is set
        if (contentRangeHeader == null) {
            throw new ApiException("Missing the required parameter 'contentRangeHeader' when calling attachmentsUploadChunk(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling attachmentsUploadChunk(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachmentsUploadChunk(Async)");
        }
        

        com.squareup.okhttp.Call call = attachmentsUploadChunkCall(organization, body, id, contentRangeHeader, project, apiVersion, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Uploads an attachment chunk.  Before performing [**Upload a Chunk**](#upload_a_chunk), make sure to have an attachment id returned in **Start a Chunked Upload** example on **Create** section. Specify the byte range of the chunk using Content-Length. For example: \&quot;Content - Length\&quot;: \&quot;bytes 0 - 39999 / 50000\&quot; for the first 40000 bytes of a 50000 byte file.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param id The id of the attachment (required)
     * @param contentRangeHeader starting and ending byte positions for chunked file upload, format is \&quot;Content-Range\&quot;: \&quot;bytes 0-10000/50000\&quot; (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName  (optional)
     * @return AttachmentReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentReference attachmentsUploadChunk(String organization, String body, UUID id, String contentRangeHeader, String project, String apiVersion, String fileName) throws ApiException {
        ApiResponse<AttachmentReference> resp = attachmentsUploadChunkWithHttpInfo(organization, body, id, contentRangeHeader, project, apiVersion, fileName);
        return resp.getData();
    }

    /**
     * 
     * Uploads an attachment chunk.  Before performing [**Upload a Chunk**](#upload_a_chunk), make sure to have an attachment id returned in **Start a Chunked Upload** example on **Create** section. Specify the byte range of the chunk using Content-Length. For example: \&quot;Content - Length\&quot;: \&quot;bytes 0 - 39999 / 50000\&quot; for the first 40000 bytes of a 50000 byte file.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param id The id of the attachment (required)
     * @param contentRangeHeader starting and ending byte positions for chunked file upload, format is \&quot;Content-Range\&quot;: \&quot;bytes 0-10000/50000\&quot; (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName  (optional)
     * @return ApiResponse&lt;AttachmentReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentReference> attachmentsUploadChunkWithHttpInfo(String organization, String body, UUID id, String contentRangeHeader, String project, String apiVersion, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = attachmentsUploadChunkValidateBeforeCall(organization, body, id, contentRangeHeader, project, apiVersion, fileName, null, null);
        Type localVarReturnType = new TypeToken<AttachmentReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Uploads an attachment chunk.  Before performing [**Upload a Chunk**](#upload_a_chunk), make sure to have an attachment id returned in **Start a Chunked Upload** example on **Create** section. Specify the byte range of the chunk using Content-Length. For example: \&quot;Content - Length\&quot;: \&quot;bytes 0 - 39999 / 50000\&quot; for the first 40000 bytes of a 50000 byte file.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param body Stream to upload (required)
     * @param id The id of the attachment (required)
     * @param contentRangeHeader starting and ending byte positions for chunked file upload, format is \&quot;Content-Range\&quot;: \&quot;bytes 0-10000/50000\&quot; (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param fileName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call attachmentsUploadChunkAsync(String organization, String body, UUID id, String contentRangeHeader, String project, String apiVersion, String fileName, final ApiCallback<AttachmentReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = attachmentsUploadChunkValidateBeforeCall(organization, body, id, contentRangeHeader, project, apiVersion, fileName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
