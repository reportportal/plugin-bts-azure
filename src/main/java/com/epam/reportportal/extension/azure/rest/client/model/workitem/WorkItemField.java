/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model.workitem;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Describes a field on a work item and it&#39;s properties specific to that work item type.
 */
@Schema(description = "Describes a field on a work item and it's properties specific to that work item type.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T21:33:08.123Z")
public class WorkItemField extends WorkItemTrackingResource {
  @SerializedName("canSortBy")
  private Boolean canSortBy = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("isDeleted")
  private Boolean isDeleted = null;

  @SerializedName("isIdentity")
  private Boolean isIdentity = null;

  @SerializedName("isPicklist")
  private Boolean isPicklist = null;

  @SerializedName("isPicklistSuggested")
  private Boolean isPicklistSuggested = null;

  @SerializedName("isQueryable")
  private Boolean isQueryable = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("picklistId")
  private UUID picklistId = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("referenceName")
  private String referenceName = null;

  @SerializedName("supportedOperations")
  private List<WorkItemFieldOperation> supportedOperations = null;

  @SerializedName("type")
  private Object type = null;

  @SerializedName("usage")
  private Object usage = null;

  public WorkItemField canSortBy(Boolean canSortBy) {
    this.canSortBy = canSortBy;
    return this;
  }

   /**
   * Indicates whether the field is sortable in server queries.
   * @return canSortBy
  **/
  @Schema(description = "Indicates whether the field is sortable in server queries.")
  public Boolean isCanSortBy() {
    return canSortBy;
  }

  public void setCanSortBy(Boolean canSortBy) {
    this.canSortBy = canSortBy;
  }

  public WorkItemField description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the field.
   * @return description
  **/
  @Schema(description = "The description of the field.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public WorkItemField isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Indicates whether this field is deleted.
   * @return isDeleted
  **/
  @Schema(description = "Indicates whether this field is deleted.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public WorkItemField isIdentity(Boolean isIdentity) {
    this.isIdentity = isIdentity;
    return this;
  }

   /**
   * Indicates whether this field is an identity field.
   * @return isIdentity
  **/
  @Schema(description = "Indicates whether this field is an identity field.")
  public Boolean isIsIdentity() {
    return isIdentity;
  }

  public void setIsIdentity(Boolean isIdentity) {
    this.isIdentity = isIdentity;
  }

  public WorkItemField isPicklist(Boolean isPicklist) {
    this.isPicklist = isPicklist;
    return this;
  }

   /**
   * Indicates whether this instance is picklist.
   * @return isPicklist
  **/
  @Schema(description = "Indicates whether this instance is picklist.")
  public Boolean isIsPicklist() {
    return isPicklist;
  }

  public void setIsPicklist(Boolean isPicklist) {
    this.isPicklist = isPicklist;
  }

  public WorkItemField isPicklistSuggested(Boolean isPicklistSuggested) {
    this.isPicklistSuggested = isPicklistSuggested;
    return this;
  }

   /**
   * Indicates whether this instance is a suggested picklist .
   * @return isPicklistSuggested
  **/
  @Schema(description = "Indicates whether this instance is a suggested picklist .")
  public Boolean isIsPicklistSuggested() {
    return isPicklistSuggested;
  }

  public void setIsPicklistSuggested(Boolean isPicklistSuggested) {
    this.isPicklistSuggested = isPicklistSuggested;
  }

  public WorkItemField isQueryable(Boolean isQueryable) {
    this.isQueryable = isQueryable;
    return this;
  }

   /**
   * Indicates whether the field can be queried in the server.
   * @return isQueryable
  **/
  @Schema(description = "Indicates whether the field can be queried in the server.")
  public Boolean isIsQueryable() {
    return isQueryable;
  }

  public void setIsQueryable(Boolean isQueryable) {
    this.isQueryable = isQueryable;
  }

  public WorkItemField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the field.
   * @return name
  **/
  @Schema(description = "The name of the field.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkItemField picklistId(UUID picklistId) {
    this.picklistId = picklistId;
    return this;
  }

   /**
   * If this field is picklist, the identifier of the picklist associated, otherwise null
   * @return picklistId
  **/
  @Schema(description = "If this field is picklist, the identifier of the picklist associated, otherwise null")
  public UUID getPicklistId() {
    return picklistId;
  }

  public void setPicklistId(UUID picklistId) {
    this.picklistId = picklistId;
  }

  public WorkItemField readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Indicates whether the field is [read only].
   * @return readOnly
  **/
  @Schema(description = "Indicates whether the field is [read only].")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public WorkItemField referenceName(String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

   /**
   * The reference name of the field.
   * @return referenceName
  **/
  @Schema(description = "The reference name of the field.")
  public String getReferenceName() {
    return referenceName;
  }

  public void setReferenceName(String referenceName) {
    this.referenceName = referenceName;
  }

  public WorkItemField supportedOperations(List<WorkItemFieldOperation> supportedOperations) {
    this.supportedOperations = supportedOperations;
    return this;
  }

  public WorkItemField addSupportedOperationsItem(WorkItemFieldOperation supportedOperationsItem) {
    if (this.supportedOperations == null) {
      this.supportedOperations = new ArrayList<WorkItemFieldOperation>();
    }
    this.supportedOperations.add(supportedOperationsItem);
    return this;
  }

   /**
   * The supported operations on this field.
   * @return supportedOperations
  **/
  @Schema(description = "The supported operations on this field.")
  public List<WorkItemFieldOperation> getSupportedOperations() {
    return supportedOperations;
  }

  public void setSupportedOperations(List<WorkItemFieldOperation> supportedOperations) {
    this.supportedOperations = supportedOperations;
  }

  public WorkItemField type(Object type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the field.
   * @return type
  **/
  @Schema(description = "The type of the field.")
  public Object getType() {
    return type;
  }

  public void setType(Object type) {
    this.type = type;
  }

  public WorkItemField usage(Object usage) {
    this.usage = usage;
    return this;
  }

   /**
   * The usage of the field.
   * @return usage
  **/
  @Schema(description = "The usage of the field.")
  public Object getUsage() {
    return usage;
  }

  public void setUsage(Object usage) {
    this.usage = usage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemField workItemField = (WorkItemField) o;
    return Objects.equals(this.canSortBy, workItemField.canSortBy) &&
        Objects.equals(this.description, workItemField.description) &&
        Objects.equals(this.isDeleted, workItemField.isDeleted) &&
        Objects.equals(this.isIdentity, workItemField.isIdentity) &&
        Objects.equals(this.isPicklist, workItemField.isPicklist) &&
        Objects.equals(this.isPicklistSuggested, workItemField.isPicklistSuggested) &&
        Objects.equals(this.isQueryable, workItemField.isQueryable) &&
        Objects.equals(this.name, workItemField.name) &&
        Objects.equals(this.picklistId, workItemField.picklistId) &&
        Objects.equals(this.readOnly, workItemField.readOnly) &&
        Objects.equals(this.referenceName, workItemField.referenceName) &&
        Objects.equals(this.supportedOperations, workItemField.supportedOperations) &&
        Objects.equals(this.type, workItemField.type) &&
        Objects.equals(this.usage, workItemField.usage) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canSortBy, description, isDeleted, isIdentity, isPicklist, isPicklistSuggested, isQueryable, name, picklistId, readOnly, referenceName, supportedOperations, type, usage, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemField {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    canSortBy: ").append(toIndentedString(canSortBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isIdentity: ").append(toIndentedString(isIdentity)).append("\n");
    sb.append("    isPicklist: ").append(toIndentedString(isPicklist)).append("\n");
    sb.append("    isPicklistSuggested: ").append(toIndentedString(isPicklistSuggested)).append("\n");
    sb.append("    isQueryable: ").append(toIndentedString(isQueryable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    picklistId: ").append(toIndentedString(picklistId)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    referenceName: ").append(toIndentedString(referenceName)).append("\n");
    sb.append("    supportedOperations: ").append(toIndentedString(supportedOperations)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
