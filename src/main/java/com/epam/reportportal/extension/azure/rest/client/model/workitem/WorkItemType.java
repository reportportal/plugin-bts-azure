/*
 * WorkItemTracking
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model.workitem;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Describes a work item type.
 */
@Schema(description = "Describes a work item type.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T21:33:08.123Z")
public class WorkItemType extends WorkItemTrackingResource {
  @SerializedName("color")
  private String color = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("fieldInstances")
  private List<WorkItemTypeFieldInstance> fieldInstances = null;

  @SerializedName("fields")
  private List<WorkItemTypeFieldInstance> fields = null;

  @SerializedName("icon")
  private WorkItemIcon icon = null;

  @SerializedName("isDisabled")
  private Boolean isDisabled = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("referenceName")
  private String referenceName = null;

  @SerializedName("states")
  private List<WorkItemStateColor> states = null;

  @SerializedName("transitions")
  private Map<String, List<WorkItemStateTransition>> transitions = null;

  @SerializedName("xmlForm")
  private String xmlForm = null;

  public WorkItemType color(String color) {
    this.color = color;
    return this;
  }

   /**
   * The color.
   * @return color
  **/
  @Schema(description = "The color.")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public WorkItemType description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the work item type.
   * @return description
  **/
  @Schema(description = "The description of the work item type.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public WorkItemType fieldInstances(List<WorkItemTypeFieldInstance> fieldInstances) {
    this.fieldInstances = fieldInstances;
    return this;
  }

  public WorkItemType addFieldInstancesItem(WorkItemTypeFieldInstance fieldInstancesItem) {
    if (this.fieldInstances == null) {
      this.fieldInstances = new ArrayList<WorkItemTypeFieldInstance>();
    }
    this.fieldInstances.add(fieldInstancesItem);
    return this;
  }

   /**
   * The fields that exist on the work item type.
   * @return fieldInstances
  **/
  @Schema(description = "The fields that exist on the work item type.")
  public List<WorkItemTypeFieldInstance> getFieldInstances() {
    return fieldInstances;
  }

  public void setFieldInstances(List<WorkItemTypeFieldInstance> fieldInstances) {
    this.fieldInstances = fieldInstances;
  }

  public WorkItemType fields(List<WorkItemTypeFieldInstance> fields) {
    this.fields = fields;
    return this;
  }

  public WorkItemType addFieldsItem(WorkItemTypeFieldInstance fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<WorkItemTypeFieldInstance>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * The fields that exist on the work item type.
   * @return fields
  **/
  @Schema(description = "The fields that exist on the work item type.")
  public List<WorkItemTypeFieldInstance> getFields() {
    return fields;
  }

  public void setFields(List<WorkItemTypeFieldInstance> fields) {
    this.fields = fields;
  }

  public WorkItemType icon(WorkItemIcon icon) {
    this.icon = icon;
    return this;
  }

   /**
   * The icon of the work item type.
   * @return icon
  **/
  @Schema(description = "The icon of the work item type.")
  public WorkItemIcon getIcon() {
    return icon;
  }

  public void setIcon(WorkItemIcon icon) {
    this.icon = icon;
  }

  public WorkItemType isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * True if work item type is disabled
   * @return isDisabled
  **/
  @Schema(description = "True if work item type is disabled")
  public Boolean isIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  public WorkItemType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Gets the name of the work item type.
   * @return name
  **/
  @Schema(description = "Gets the name of the work item type.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkItemType referenceName(String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

   /**
   * The reference name of the work item type.
   * @return referenceName
  **/
  @Schema(description = "The reference name of the work item type.")
  public String getReferenceName() {
    return referenceName;
  }

  public void setReferenceName(String referenceName) {
    this.referenceName = referenceName;
  }

  public WorkItemType states(List<WorkItemStateColor> states) {
    this.states = states;
    return this;
  }

  public WorkItemType addStatesItem(WorkItemStateColor statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<WorkItemStateColor>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Gets state information for the work item type.
   * @return states
  **/
  @Schema(description = "Gets state information for the work item type.")
  public List<WorkItemStateColor> getStates() {
    return states;
  }

  public void setStates(List<WorkItemStateColor> states) {
    this.states = states;
  }

  public WorkItemType transitions(Map<String, List<WorkItemStateTransition>> transitions) {
    this.transitions = transitions;
    return this;
  }

  public WorkItemType putTransitionsItem(String key, List<WorkItemStateTransition> transitionsItem) {
    if (this.transitions == null) {
      this.transitions = new HashMap<String, List<WorkItemStateTransition>>();
    }
    this.transitions.put(key, transitionsItem);
    return this;
  }

   /**
   * Gets the various state transition mappings in the work item type.
   * @return transitions
  **/
  @Schema(description = "Gets the various state transition mappings in the work item type.")
  public Map<String, List<WorkItemStateTransition>> getTransitions() {
    return transitions;
  }

  public void setTransitions(Map<String, List<WorkItemStateTransition>> transitions) {
    this.transitions = transitions;
  }

  public WorkItemType xmlForm(String xmlForm) {
    this.xmlForm = xmlForm;
    return this;
  }

   /**
   * The XML form.
   * @return xmlForm
  **/
  @Schema(description = "The XML form.")
  public String getXmlForm() {
    return xmlForm;
  }

  public void setXmlForm(String xmlForm) {
    this.xmlForm = xmlForm;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemType workItemType = (WorkItemType) o;
    return Objects.equals(this.color, workItemType.color) &&
        Objects.equals(this.description, workItemType.description) &&
        Objects.equals(this.fieldInstances, workItemType.fieldInstances) &&
        Objects.equals(this.fields, workItemType.fields) &&
        Objects.equals(this.icon, workItemType.icon) &&
        Objects.equals(this.isDisabled, workItemType.isDisabled) &&
        Objects.equals(this.name, workItemType.name) &&
        Objects.equals(this.referenceName, workItemType.referenceName) &&
        Objects.equals(this.states, workItemType.states) &&
        Objects.equals(this.transitions, workItemType.transitions) &&
        Objects.equals(this.xmlForm, workItemType.xmlForm) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, description, fieldInstances, fields, icon, isDisabled, name, referenceName, states, transitions, xmlForm, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemType {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fieldInstances: ").append(toIndentedString(fieldInstances)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    referenceName: ").append(toIndentedString(referenceName)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    xmlForm: ").append(toIndentedString(xmlForm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
