/*
 * Core
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Base Identity class to allow \&quot;trimmed\&quot; identity class in the GetConnectionData API Makes sure that on-the-wire representations of the derived classes are compatible with each other (e.g. Server responds with PublicIdentity object while client deserializes it as Identity object) Derived classes should not have additional [DataMember] properties
 */
@Schema(description = "Base Identity class to allow \"trimmed\" identity class in the GetConnectionData API Makes sure that on-the-wire representations of the derived classes are compatible with each other (e.g. Server responds with PublicIdentity object while client deserializes it as Identity object) Derived classes should not have additional [DataMember] properties")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-22T22:33:25.592Z")
public class IdentityBase {
  @SerializedName("customDisplayName")
  private String customDisplayName = null;

  @SerializedName("descriptor")
  private IdentityDescriptor descriptor = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("isActive")
  private Boolean isActive = null;

  @SerializedName("isContainer")
  private Boolean isContainer = null;

  @SerializedName("masterId")
  private UUID masterId = null;

  @SerializedName("memberIds")
  private List<UUID> memberIds = null;

  @SerializedName("memberOf")
  private List<IdentityDescriptor> memberOf = null;

  @SerializedName("members")
  private List<IdentityDescriptor> members = null;

  @SerializedName("metaTypeId")
  private Integer metaTypeId = null;

  @SerializedName("properties")
  private PropertiesCollection properties = null;

  @SerializedName("providerDisplayName")
  private String providerDisplayName = null;

  @SerializedName("resourceVersion")
  private Integer resourceVersion = null;

  @SerializedName("socialDescriptor")
  private String socialDescriptor = null;

  @SerializedName("subjectDescriptor")
  private String subjectDescriptor = null;

  @SerializedName("uniqueUserId")
  private Integer uniqueUserId = null;

  public IdentityBase customDisplayName(String customDisplayName) {
    this.customDisplayName = customDisplayName;
    return this;
  }

   /**
   * The custom display name for the identity (if any). Setting this property to an empty string will clear the existing custom display name. Setting this property to null will not affect the existing persisted value (since null values do not get sent over the wire or to the database)
   * @return customDisplayName
  **/
  @Schema(description = "The custom display name for the identity (if any). Setting this property to an empty string will clear the existing custom display name. Setting this property to null will not affect the existing persisted value (since null values do not get sent over the wire or to the database)")
  public String getCustomDisplayName() {
    return customDisplayName;
  }

  public void setCustomDisplayName(String customDisplayName) {
    this.customDisplayName = customDisplayName;
  }

  public IdentityBase descriptor(IdentityDescriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @Schema(description = "")
  public IdentityDescriptor getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(IdentityDescriptor descriptor) {
    this.descriptor = descriptor;
  }

  public IdentityBase id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Identity Identifier. Also called Storage Key, or VSID
   * @return id
  **/
  @Schema(description = "Identity Identifier. Also called Storage Key, or VSID")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public IdentityBase isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * True if the identity has a membership in any Azure Devops group in the organization.
   * @return isActive
  **/
  @Schema(description = "True if the identity has a membership in any Azure Devops group in the organization.")
  public Boolean isIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public IdentityBase isContainer(Boolean isContainer) {
    this.isContainer = isContainer;
    return this;
  }

   /**
   * True if the identity is a group.
   * @return isContainer
  **/
  @Schema(description = "True if the identity is a group.")
  public Boolean isIsContainer() {
    return isContainer;
  }

  public void setIsContainer(Boolean isContainer) {
    this.isContainer = isContainer;
  }

  public IdentityBase masterId(UUID masterId) {
    this.masterId = masterId;
    return this;
  }

   /**
   * Get masterId
   * @return masterId
  **/
  @Schema(description = "")
  public UUID getMasterId() {
    return masterId;
  }

  public void setMasterId(UUID masterId) {
    this.masterId = masterId;
  }

  public IdentityBase memberIds(List<UUID> memberIds) {
    this.memberIds = memberIds;
    return this;
  }

  public IdentityBase addMemberIdsItem(UUID memberIdsItem) {
    if (this.memberIds == null) {
      this.memberIds = new ArrayList<UUID>();
    }
    this.memberIds.add(memberIdsItem);
    return this;
  }

   /**
   * Id of the members of the identity (groups only).
   * @return memberIds
  **/
  @Schema(description = "Id of the members of the identity (groups only).")
  public List<UUID> getMemberIds() {
    return memberIds;
  }

  public void setMemberIds(List<UUID> memberIds) {
    this.memberIds = memberIds;
  }

  public IdentityBase memberOf(List<IdentityDescriptor> memberOf) {
    this.memberOf = memberOf;
    return this;
  }

  public IdentityBase addMemberOfItem(IdentityDescriptor memberOfItem) {
    if (this.memberOf == null) {
      this.memberOf = new ArrayList<IdentityDescriptor>();
    }
    this.memberOf.add(memberOfItem);
    return this;
  }

   /**
   * Get memberOf
   * @return memberOf
  **/
  @Schema(description = "")
  public List<IdentityDescriptor> getMemberOf() {
    return memberOf;
  }

  public void setMemberOf(List<IdentityDescriptor> memberOf) {
    this.memberOf = memberOf;
  }

  public IdentityBase members(List<IdentityDescriptor> members) {
    this.members = members;
    return this;
  }

  public IdentityBase addMembersItem(IdentityDescriptor membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<IdentityDescriptor>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @Schema(description = "")
  public List<IdentityDescriptor> getMembers() {
    return members;
  }

  public void setMembers(List<IdentityDescriptor> members) {
    this.members = members;
  }

  public IdentityBase metaTypeId(Integer metaTypeId) {
    this.metaTypeId = metaTypeId;
    return this;
  }

   /**
   * Get metaTypeId
   * @return metaTypeId
  **/
  @Schema(description = "")
  public Integer getMetaTypeId() {
    return metaTypeId;
  }

  public void setMetaTypeId(Integer metaTypeId) {
    this.metaTypeId = metaTypeId;
  }

  public IdentityBase properties(PropertiesCollection properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public PropertiesCollection getProperties() {
    return properties;
  }

  public void setProperties(PropertiesCollection properties) {
    this.properties = properties;
  }

  public IdentityBase providerDisplayName(String providerDisplayName) {
    this.providerDisplayName = providerDisplayName;
    return this;
  }

   /**
   * The display name for the identity as specified by the source identity provider.
   * @return providerDisplayName
  **/
  @Schema(description = "The display name for the identity as specified by the source identity provider.")
  public String getProviderDisplayName() {
    return providerDisplayName;
  }

  public void setProviderDisplayName(String providerDisplayName) {
    this.providerDisplayName = providerDisplayName;
  }

  public IdentityBase resourceVersion(Integer resourceVersion) {
    this.resourceVersion = resourceVersion;
    return this;
  }

   /**
   * Get resourceVersion
   * @return resourceVersion
  **/
  @Schema(description = "")
  public Integer getResourceVersion() {
    return resourceVersion;
  }

  public void setResourceVersion(Integer resourceVersion) {
    this.resourceVersion = resourceVersion;
  }

  public IdentityBase socialDescriptor(String socialDescriptor) {
    this.socialDescriptor = socialDescriptor;
    return this;
  }

   /**
   * Get socialDescriptor
   * @return socialDescriptor
  **/
  @Schema(description = "")
  public String getSocialDescriptor() {
    return socialDescriptor;
  }

  public void setSocialDescriptor(String socialDescriptor) {
    this.socialDescriptor = socialDescriptor;
  }

  public IdentityBase subjectDescriptor(String subjectDescriptor) {
    this.subjectDescriptor = subjectDescriptor;
    return this;
  }

   /**
   * Subject descriptor of a Graph entity.
   * @return subjectDescriptor
  **/
  @Schema(description = "Subject descriptor of a Graph entity.")
  public String getSubjectDescriptor() {
    return subjectDescriptor;
  }

  public void setSubjectDescriptor(String subjectDescriptor) {
    this.subjectDescriptor = subjectDescriptor;
  }

  public IdentityBase uniqueUserId(Integer uniqueUserId) {
    this.uniqueUserId = uniqueUserId;
    return this;
  }

   /**
   * Get uniqueUserId
   * @return uniqueUserId
  **/
  @Schema(description = "")
  public Integer getUniqueUserId() {
    return uniqueUserId;
  }

  public void setUniqueUserId(Integer uniqueUserId) {
    this.uniqueUserId = uniqueUserId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityBase identityBase = (IdentityBase) o;
    return Objects.equals(this.customDisplayName, identityBase.customDisplayName) &&
        Objects.equals(this.descriptor, identityBase.descriptor) &&
        Objects.equals(this.id, identityBase.id) &&
        Objects.equals(this.isActive, identityBase.isActive) &&
        Objects.equals(this.isContainer, identityBase.isContainer) &&
        Objects.equals(this.masterId, identityBase.masterId) &&
        Objects.equals(this.memberIds, identityBase.memberIds) &&
        Objects.equals(this.memberOf, identityBase.memberOf) &&
        Objects.equals(this.members, identityBase.members) &&
        Objects.equals(this.metaTypeId, identityBase.metaTypeId) &&
        Objects.equals(this.properties, identityBase.properties) &&
        Objects.equals(this.providerDisplayName, identityBase.providerDisplayName) &&
        Objects.equals(this.resourceVersion, identityBase.resourceVersion) &&
        Objects.equals(this.socialDescriptor, identityBase.socialDescriptor) &&
        Objects.equals(this.subjectDescriptor, identityBase.subjectDescriptor) &&
        Objects.equals(this.uniqueUserId, identityBase.uniqueUserId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDisplayName, descriptor, id, isActive, isContainer, masterId, memberIds, memberOf, members, metaTypeId, properties, providerDisplayName, resourceVersion, socialDescriptor, subjectDescriptor, uniqueUserId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityBase {\n");
    
    sb.append("    customDisplayName: ").append(toIndentedString(customDisplayName)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isContainer: ").append(toIndentedString(isContainer)).append("\n");
    sb.append("    masterId: ").append(toIndentedString(masterId)).append("\n");
    sb.append("    memberIds: ").append(toIndentedString(memberIds)).append("\n");
    sb.append("    memberOf: ").append(toIndentedString(memberOf)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    metaTypeId: ").append(toIndentedString(metaTypeId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    providerDisplayName: ").append(toIndentedString(providerDisplayName)).append("\n");
    sb.append("    resourceVersion: ").append(toIndentedString(resourceVersion)).append("\n");
    sb.append("    socialDescriptor: ").append(toIndentedString(socialDescriptor)).append("\n");
    sb.append("    subjectDescriptor: ").append(toIndentedString(subjectDescriptor)).append("\n");
    sb.append("    uniqueUserId: ").append(toIndentedString(uniqueUserId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
