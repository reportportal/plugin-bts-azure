/*
 * Core
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.azure.rest.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Represents a Team Project object.
 */
@Schema(description = "Represents a Team Project object.")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-22T22:33:25.592Z")
public class TeamProject extends TeamProjectReference {
  @SerializedName("_links")
  private ReferenceLinks links = null;

  @SerializedName("capabilities")
  private Map<String, Map<String, String>> capabilities = null;

  @SerializedName("defaultTeam")
  private WebApiTeamRef defaultTeam = null;

  public TeamProject links(ReferenceLinks links) {
    this.links = links;
    return this;
  }

   /**
   * The links to other objects related to this object.
   * @return links
  **/
  @Schema(description = "The links to other objects related to this object.")
  public ReferenceLinks getLinks() {
    return links;
  }

  public void setLinks(ReferenceLinks links) {
    this.links = links;
  }

  public TeamProject capabilities(Map<String, Map<String, String>> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public TeamProject putCapabilitiesItem(String key, Map<String, String> capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new HashMap<String, Map<String, String>>();
    }
    this.capabilities.put(key, capabilitiesItem);
    return this;
  }

   /**
   * Set of capabilities this project has (such as process template &amp; version control).
   * @return capabilities
  **/
  @Schema(description = "Set of capabilities this project has (such as process template & version control).")
  public Map<String, Map<String, String>> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Map<String, Map<String, String>> capabilities) {
    this.capabilities = capabilities;
  }

  public TeamProject defaultTeam(WebApiTeamRef defaultTeam) {
    this.defaultTeam = defaultTeam;
    return this;
  }

   /**
   * The shallow ref to the default team.
   * @return defaultTeam
  **/
  @Schema(description = "The shallow ref to the default team.")
  public WebApiTeamRef getDefaultTeam() {
    return defaultTeam;
  }

  public void setDefaultTeam(WebApiTeamRef defaultTeam) {
    this.defaultTeam = defaultTeam;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamProject teamProject = (TeamProject) o;
    return Objects.equals(this.links, teamProject.links) &&
        Objects.equals(this.capabilities, teamProject.capabilities) &&
        Objects.equals(this.defaultTeam, teamProject.defaultTeam) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, capabilities, defaultTeam, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamProject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    defaultTeam: ").append(toIndentedString(defaultTeam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
